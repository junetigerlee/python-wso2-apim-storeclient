# coding: utf-8

"""
    WSO2 API Manager - Store

    This specifies a **RESTful API** for WSO2 **API Manager** - Store.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.store/src/main/resources/store-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Tier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'tier_level': 'str',
        'attributes': 'dict(str, str)',
        'request_count': 'int',
        'unit_time': 'int',
        'tier_plan': 'str',
        'stop_on_quota_reach': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'tier_level': 'tierLevel',
        'attributes': 'attributes',
        'request_count': 'requestCount',
        'unit_time': 'unitTime',
        'tier_plan': 'tierPlan',
        'stop_on_quota_reach': 'stopOnQuotaReach'
    }

    def __init__(self, name=None, description=None, tier_level=None, attributes=None, request_count=None, unit_time=None, tier_plan=None, stop_on_quota_reach=None):
        """
        Tier - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._tier_level = None
        self._attributes = None
        self._request_count = None
        self._unit_time = None
        self._tier_plan = None
        self._stop_on_quota_reach = None

        self.name = name
        if description is not None:
          self.description = description
        if tier_level is not None:
          self.tier_level = tier_level
        if attributes is not None:
          self.attributes = attributes
        self.request_count = request_count
        self.unit_time = unit_time
        self.tier_plan = tier_plan
        self.stop_on_quota_reach = stop_on_quota_reach

    @property
    def name(self):
        """
        Gets the name of this Tier.

        :return: The name of this Tier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Tier.

        :param name: The name of this Tier.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Tier.

        :return: The description of this Tier.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Tier.

        :param description: The description of this Tier.
        :type: str
        """

        self._description = description

    @property
    def tier_level(self):
        """
        Gets the tier_level of this Tier.

        :return: The tier_level of this Tier.
        :rtype: str
        """
        return self._tier_level

    @tier_level.setter
    def tier_level(self, tier_level):
        """
        Sets the tier_level of this Tier.

        :param tier_level: The tier_level of this Tier.
        :type: str
        """
        allowed_values = ["api", "application"]
        if tier_level not in allowed_values:
            raise ValueError(
                "Invalid value for `tier_level` ({0}), must be one of {1}"
                .format(tier_level, allowed_values)
            )

        self._tier_level = tier_level

    @property
    def attributes(self):
        """
        Gets the attributes of this Tier.
        Custom attributes added to the tier policy 

        :return: The attributes of this Tier.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this Tier.
        Custom attributes added to the tier policy 

        :param attributes: The attributes of this Tier.
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def request_count(self):
        """
        Gets the request_count of this Tier.
        Maximum number of requests which can be sent within a provided unit time 

        :return: The request_count of this Tier.
        :rtype: int
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """
        Sets the request_count of this Tier.
        Maximum number of requests which can be sent within a provided unit time 

        :param request_count: The request_count of this Tier.
        :type: int
        """
        if request_count is None:
            raise ValueError("Invalid value for `request_count`, must not be `None`")

        self._request_count = request_count

    @property
    def unit_time(self):
        """
        Gets the unit_time of this Tier.

        :return: The unit_time of this Tier.
        :rtype: int
        """
        return self._unit_time

    @unit_time.setter
    def unit_time(self, unit_time):
        """
        Sets the unit_time of this Tier.

        :param unit_time: The unit_time of this Tier.
        :type: int
        """
        if unit_time is None:
            raise ValueError("Invalid value for `unit_time`, must not be `None`")

        self._unit_time = unit_time

    @property
    def tier_plan(self):
        """
        Gets the tier_plan of this Tier.
        This attribute declares whether this tier is available under commercial or free 

        :return: The tier_plan of this Tier.
        :rtype: str
        """
        return self._tier_plan

    @tier_plan.setter
    def tier_plan(self, tier_plan):
        """
        Sets the tier_plan of this Tier.
        This attribute declares whether this tier is available under commercial or free 

        :param tier_plan: The tier_plan of this Tier.
        :type: str
        """
        if tier_plan is None:
            raise ValueError("Invalid value for `tier_plan`, must not be `None`")
        allowed_values = ["FREE", "COMMERCIAL"]
        if tier_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `tier_plan` ({0}), must be one of {1}"
                .format(tier_plan, allowed_values)
            )

        self._tier_plan = tier_plan

    @property
    def stop_on_quota_reach(self):
        """
        Gets the stop_on_quota_reach of this Tier.
        If this attribute is set to false, you are capabale of sending requests even if the request count exceeded within a unit time 

        :return: The stop_on_quota_reach of this Tier.
        :rtype: bool
        """
        return self._stop_on_quota_reach

    @stop_on_quota_reach.setter
    def stop_on_quota_reach(self, stop_on_quota_reach):
        """
        Sets the stop_on_quota_reach of this Tier.
        If this attribute is set to false, you are capabale of sending requests even if the request count exceeded within a unit time 

        :param stop_on_quota_reach: The stop_on_quota_reach of this Tier.
        :type: bool
        """
        if stop_on_quota_reach is None:
            raise ValueError("Invalid value for `stop_on_quota_reach`, must not be `None`")

        self._stop_on_quota_reach = stop_on_quota_reach

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Tier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
