# coding: utf-8

"""
    WSO2 API Manager - Store

    This specifies a **RESTful API** for WSO2 **API Manager** - Store.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.store/src/main/resources/store-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplicationKeyGenerationRequestObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_type': 'str',
        'validity_time': 'str',
        'callback_url': 'str',
        'access_allow_domains': 'list[str]',
        'scopes': 'list[str]'
    }

    attribute_map = {
        'key_type': 'keyType',
        'validity_time': 'validityTime',
        'callback_url': 'callbackUrl',
        'access_allow_domains': 'accessAllowDomains',
        'scopes': 'scopes'
    }

    def __init__(self, key_type=None, validity_time=None, callback_url=None, access_allow_domains=None, scopes=None):
        """
        ApplicationKeyGenerationRequestObject - a model defined in Swagger
        """

        self._key_type = None
        self._validity_time = None
        self._callback_url = None
        self._access_allow_domains = None
        self._scopes = None

        self.key_type = key_type
        self.validity_time = validity_time
        if callback_url is not None:
          self.callback_url = callback_url
        self.access_allow_domains = access_allow_domains
        if scopes is not None:
          self.scopes = scopes

    @property
    def key_type(self):
        """
        Gets the key_type of this ApplicationKeyGenerationRequestObject.

        :return: The key_type of this ApplicationKeyGenerationRequestObject.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """
        Sets the key_type of this ApplicationKeyGenerationRequestObject.

        :param key_type: The key_type of this ApplicationKeyGenerationRequestObject.
        :type: str
        """
        if key_type is None:
            raise ValueError("Invalid value for `key_type`, must not be `None`")
        allowed_values = ["PRODUCTION", "SANDBOX"]
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    @property
    def validity_time(self):
        """
        Gets the validity_time of this ApplicationKeyGenerationRequestObject.

        :return: The validity_time of this ApplicationKeyGenerationRequestObject.
        :rtype: str
        """
        return self._validity_time

    @validity_time.setter
    def validity_time(self, validity_time):
        """
        Sets the validity_time of this ApplicationKeyGenerationRequestObject.

        :param validity_time: The validity_time of this ApplicationKeyGenerationRequestObject.
        :type: str
        """
        if validity_time is None:
            raise ValueError("Invalid value for `validity_time`, must not be `None`")

        self._validity_time = validity_time

    @property
    def callback_url(self):
        """
        Gets the callback_url of this ApplicationKeyGenerationRequestObject.
        Callback URL

        :return: The callback_url of this ApplicationKeyGenerationRequestObject.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """
        Sets the callback_url of this ApplicationKeyGenerationRequestObject.
        Callback URL

        :param callback_url: The callback_url of this ApplicationKeyGenerationRequestObject.
        :type: str
        """

        self._callback_url = callback_url

    @property
    def access_allow_domains(self):
        """
        Gets the access_allow_domains of this ApplicationKeyGenerationRequestObject.
        Allowed domains for the access token

        :return: The access_allow_domains of this ApplicationKeyGenerationRequestObject.
        :rtype: list[str]
        """
        return self._access_allow_domains

    @access_allow_domains.setter
    def access_allow_domains(self, access_allow_domains):
        """
        Sets the access_allow_domains of this ApplicationKeyGenerationRequestObject.
        Allowed domains for the access token

        :param access_allow_domains: The access_allow_domains of this ApplicationKeyGenerationRequestObject.
        :type: list[str]
        """
        if access_allow_domains is None:
            raise ValueError("Invalid value for `access_allow_domains`, must not be `None`")

        self._access_allow_domains = access_allow_domains

    @property
    def scopes(self):
        """
        Gets the scopes of this ApplicationKeyGenerationRequestObject.
        Allowed scopes for the access token

        :return: The scopes of this ApplicationKeyGenerationRequestObject.
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """
        Sets the scopes of this ApplicationKeyGenerationRequestObject.
        Allowed scopes for the access token

        :param scopes: The scopes of this ApplicationKeyGenerationRequestObject.
        :type: list[str]
        """

        self._scopes = scopes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplicationKeyGenerationRequestObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
