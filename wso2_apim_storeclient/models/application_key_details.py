# coding: utf-8

"""
    WSO2 API Manager - Store

    This specifies a **RESTful API** for WSO2 **API Manager** - Store.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.store/src/main/resources/store-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplicationKeyDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumer_key': 'str',
        'consumer_secret': 'str',
        'supported_grant_types': 'list[str]',
        'key_state': 'str',
        'key_type': 'str',
        'token': 'TokenDetailsForInvokingAPIs'
    }

    attribute_map = {
        'consumer_key': 'consumerKey',
        'consumer_secret': 'consumerSecret',
        'supported_grant_types': 'supportedGrantTypes',
        'key_state': 'keyState',
        'key_type': 'keyType',
        'token': 'token'
    }

    def __init__(self, consumer_key=None, consumer_secret=None, supported_grant_types=None, key_state=None, key_type=None, token=None):
        """
        ApplicationKeyDetails - a model defined in Swagger
        """

        self._consumer_key = None
        self._consumer_secret = None
        self._supported_grant_types = None
        self._key_state = None
        self._key_type = None
        self._token = None

        if consumer_key is not None:
          self.consumer_key = consumer_key
        if consumer_secret is not None:
          self.consumer_secret = consumer_secret
        if supported_grant_types is not None:
          self.supported_grant_types = supported_grant_types
        if key_state is not None:
          self.key_state = key_state
        if key_type is not None:
          self.key_type = key_type
        if token is not None:
          self.token = token

    @property
    def consumer_key(self):
        """
        Gets the consumer_key of this ApplicationKeyDetails.
        Consumer key of the application

        :return: The consumer_key of this ApplicationKeyDetails.
        :rtype: str
        """
        return self._consumer_key

    @consumer_key.setter
    def consumer_key(self, consumer_key):
        """
        Sets the consumer_key of this ApplicationKeyDetails.
        Consumer key of the application

        :param consumer_key: The consumer_key of this ApplicationKeyDetails.
        :type: str
        """

        self._consumer_key = consumer_key

    @property
    def consumer_secret(self):
        """
        Gets the consumer_secret of this ApplicationKeyDetails.
        Consumer secret of the application

        :return: The consumer_secret of this ApplicationKeyDetails.
        :rtype: str
        """
        return self._consumer_secret

    @consumer_secret.setter
    def consumer_secret(self, consumer_secret):
        """
        Sets the consumer_secret of this ApplicationKeyDetails.
        Consumer secret of the application

        :param consumer_secret: The consumer_secret of this ApplicationKeyDetails.
        :type: str
        """

        self._consumer_secret = consumer_secret

    @property
    def supported_grant_types(self):
        """
        Gets the supported_grant_types of this ApplicationKeyDetails.
        Supported grant types for the application

        :return: The supported_grant_types of this ApplicationKeyDetails.
        :rtype: list[str]
        """
        return self._supported_grant_types

    @supported_grant_types.setter
    def supported_grant_types(self, supported_grant_types):
        """
        Sets the supported_grant_types of this ApplicationKeyDetails.
        Supported grant types for the application

        :param supported_grant_types: The supported_grant_types of this ApplicationKeyDetails.
        :type: list[str]
        """

        self._supported_grant_types = supported_grant_types

    @property
    def key_state(self):
        """
        Gets the key_state of this ApplicationKeyDetails.
        State of the key generation of the application

        :return: The key_state of this ApplicationKeyDetails.
        :rtype: str
        """
        return self._key_state

    @key_state.setter
    def key_state(self, key_state):
        """
        Sets the key_state of this ApplicationKeyDetails.
        State of the key generation of the application

        :param key_state: The key_state of this ApplicationKeyDetails.
        :type: str
        """

        self._key_state = key_state

    @property
    def key_type(self):
        """
        Gets the key_type of this ApplicationKeyDetails.
        Key type

        :return: The key_type of this ApplicationKeyDetails.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """
        Sets the key_type of this ApplicationKeyDetails.
        Key type

        :param key_type: The key_type of this ApplicationKeyDetails.
        :type: str
        """
        allowed_values = ["PRODUCTION", "SANDBOX"]
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    @property
    def token(self):
        """
        Gets the token of this ApplicationKeyDetails.

        :return: The token of this ApplicationKeyDetails.
        :rtype: TokenDetailsForInvokingAPIs
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this ApplicationKeyDetails.

        :param token: The token of this ApplicationKeyDetails.
        :type: TokenDetailsForInvokingAPIs
        """

        self._token = token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplicationKeyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
