# coding: utf-8

"""
    WSO2 API Manager - Store

    This specifies a **RESTful API** for WSO2 **API Manager** - Store.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.store/src/main/resources/store-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Subscription1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'str',
        'application_id': 'str',
        'api_identifier': 'str',
        'tier': 'str',
        'status': 'str'
    }

    attribute_map = {
        'subscription_id': 'subscriptionId',
        'application_id': 'applicationId',
        'api_identifier': 'apiIdentifier',
        'tier': 'tier',
        'status': 'status'
    }

    def __init__(self, subscription_id=None, application_id=None, api_identifier=None, tier=None, status=None):
        """
        Subscription1 - a model defined in Swagger
        """

        self._subscription_id = None
        self._application_id = None
        self._api_identifier = None
        self._tier = None
        self._status = None

        if subscription_id is not None:
          self.subscription_id = subscription_id
        self.application_id = application_id
        self.api_identifier = api_identifier
        self.tier = tier
        if status is not None:
          self.status = status

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this Subscription1.

        :return: The subscription_id of this Subscription1.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this Subscription1.

        :param subscription_id: The subscription_id of this Subscription1.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def application_id(self):
        """
        Gets the application_id of this Subscription1.

        :return: The application_id of this Subscription1.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """
        Sets the application_id of this Subscription1.

        :param application_id: The application_id of this Subscription1.
        :type: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def api_identifier(self):
        """
        Gets the api_identifier of this Subscription1.

        :return: The api_identifier of this Subscription1.
        :rtype: str
        """
        return self._api_identifier

    @api_identifier.setter
    def api_identifier(self, api_identifier):
        """
        Sets the api_identifier of this Subscription1.

        :param api_identifier: The api_identifier of this Subscription1.
        :type: str
        """
        if api_identifier is None:
            raise ValueError("Invalid value for `api_identifier`, must not be `None`")

        self._api_identifier = api_identifier

    @property
    def tier(self):
        """
        Gets the tier of this Subscription1.

        :return: The tier of this Subscription1.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """
        Sets the tier of this Subscription1.

        :param tier: The tier of this Subscription1.
        :type: str
        """
        if tier is None:
            raise ValueError("Invalid value for `tier`, must not be `None`")

        self._tier = tier

    @property
    def status(self):
        """
        Gets the status of this Subscription1.

        :return: The status of this Subscription1.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Subscription1.

        :param status: The status of this Subscription1.
        :type: str
        """
        allowed_values = ["BLOCKED", "PROD_ONLY_BLOCKED", "UNBLOCKED", "ON_HOLD", "REJECTED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Subscription1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
