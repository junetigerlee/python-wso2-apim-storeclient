# coding: utf-8

"""
    WSO2 API Manager - Store

    This specifies a **RESTful API** for WSO2 **API Manager** - Store.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.store/src/main/resources/store-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class APIObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'context': 'str',
        'version': 'str',
        'provider': 'str',
        'api_definition': 'str',
        'wsdl_uri': 'str',
        'status': 'str',
        'is_default_version': 'bool',
        'transport': 'list[str]',
        'tags': 'list[str]',
        'tiers': 'list[str]',
        'thumbnail_url': 'str',
        'endpoint_ur_ls': 'list[APIObjectEndpointURLs]',
        'business_information': 'APIObjectBusinessInformation'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'context': 'context',
        'version': 'version',
        'provider': 'provider',
        'api_definition': 'apiDefinition',
        'wsdl_uri': 'wsdlUri',
        'status': 'status',
        'is_default_version': 'isDefaultVersion',
        'transport': 'transport',
        'tags': 'tags',
        'tiers': 'tiers',
        'thumbnail_url': 'thumbnailUrl',
        'endpoint_ur_ls': 'endpointURLs',
        'business_information': 'businessInformation'
    }

    def __init__(self, id=None, name=None, description=None, context=None, version=None, provider=None, api_definition=None, wsdl_uri=None, status=None, is_default_version=None, transport=None, tags=None, tiers=None, thumbnail_url=None, endpoint_ur_ls=None, business_information=None):
        """
        APIObject - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._context = None
        self._version = None
        self._provider = None
        self._api_definition = None
        self._wsdl_uri = None
        self._status = None
        self._is_default_version = None
        self._transport = None
        self._tags = None
        self._tiers = None
        self._thumbnail_url = None
        self._endpoint_ur_ls = None
        self._business_information = None

        if id is not None:
          self.id = id
        self.name = name
        if description is not None:
          self.description = description
        self.context = context
        self.version = version
        self.provider = provider
        self.api_definition = api_definition
        if wsdl_uri is not None:
          self.wsdl_uri = wsdl_uri
        self.status = status
        if is_default_version is not None:
          self.is_default_version = is_default_version
        if transport is not None:
          self.transport = transport
        if tags is not None:
          self.tags = tags
        if tiers is not None:
          self.tiers = tiers
        if thumbnail_url is not None:
          self.thumbnail_url = thumbnail_url
        if endpoint_ur_ls is not None:
          self.endpoint_ur_ls = endpoint_ur_ls
        if business_information is not None:
          self.business_information = business_information

    @property
    def id(self):
        """
        Gets the id of this APIObject.
        UUID of the api registry artifact 

        :return: The id of this APIObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this APIObject.
        UUID of the api registry artifact 

        :param id: The id of this APIObject.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this APIObject.

        :return: The name of this APIObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this APIObject.

        :param name: The name of this APIObject.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this APIObject.

        :return: The description of this APIObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this APIObject.

        :param description: The description of this APIObject.
        :type: str
        """

        self._description = description

    @property
    def context(self):
        """
        Gets the context of this APIObject.

        :return: The context of this APIObject.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this APIObject.

        :param context: The context of this APIObject.
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def version(self):
        """
        Gets the version of this APIObject.

        :return: The version of this APIObject.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this APIObject.

        :param version: The version of this APIObject.
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def provider(self):
        """
        Gets the provider of this APIObject.
        If the provider value is not given user invoking the api will be used as the provider. 

        :return: The provider of this APIObject.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this APIObject.
        If the provider value is not given user invoking the api will be used as the provider. 

        :param provider: The provider of this APIObject.
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def api_definition(self):
        """
        Gets the api_definition of this APIObject.
        Swagger definition of the API which contains details about URI templates and scopes 

        :return: The api_definition of this APIObject.
        :rtype: str
        """
        return self._api_definition

    @api_definition.setter
    def api_definition(self, api_definition):
        """
        Sets the api_definition of this APIObject.
        Swagger definition of the API which contains details about URI templates and scopes 

        :param api_definition: The api_definition of this APIObject.
        :type: str
        """
        if api_definition is None:
            raise ValueError("Invalid value for `api_definition`, must not be `None`")

        self._api_definition = api_definition

    @property
    def wsdl_uri(self):
        """
        Gets the wsdl_uri of this APIObject.
        WSDL URL if the API is based on a WSDL endpoint 

        :return: The wsdl_uri of this APIObject.
        :rtype: str
        """
        return self._wsdl_uri

    @wsdl_uri.setter
    def wsdl_uri(self, wsdl_uri):
        """
        Sets the wsdl_uri of this APIObject.
        WSDL URL if the API is based on a WSDL endpoint 

        :param wsdl_uri: The wsdl_uri of this APIObject.
        :type: str
        """

        self._wsdl_uri = wsdl_uri

    @property
    def status(self):
        """
        Gets the status of this APIObject.

        :return: The status of this APIObject.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this APIObject.

        :param status: The status of this APIObject.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def is_default_version(self):
        """
        Gets the is_default_version of this APIObject.

        :return: The is_default_version of this APIObject.
        :rtype: bool
        """
        return self._is_default_version

    @is_default_version.setter
    def is_default_version(self, is_default_version):
        """
        Sets the is_default_version of this APIObject.

        :param is_default_version: The is_default_version of this APIObject.
        :type: bool
        """

        self._is_default_version = is_default_version

    @property
    def transport(self):
        """
        Gets the transport of this APIObject.

        :return: The transport of this APIObject.
        :rtype: list[str]
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """
        Sets the transport of this APIObject.

        :param transport: The transport of this APIObject.
        :type: list[str]
        """

        self._transport = transport

    @property
    def tags(self):
        """
        Gets the tags of this APIObject.

        :return: The tags of this APIObject.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this APIObject.

        :param tags: The tags of this APIObject.
        :type: list[str]
        """

        self._tags = tags

    @property
    def tiers(self):
        """
        Gets the tiers of this APIObject.

        :return: The tiers of this APIObject.
        :rtype: list[str]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """
        Sets the tiers of this APIObject.

        :param tiers: The tiers of this APIObject.
        :type: list[str]
        """

        self._tiers = tiers

    @property
    def thumbnail_url(self):
        """
        Gets the thumbnail_url of this APIObject.

        :return: The thumbnail_url of this APIObject.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """
        Sets the thumbnail_url of this APIObject.

        :param thumbnail_url: The thumbnail_url of this APIObject.
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def endpoint_ur_ls(self):
        """
        Gets the endpoint_ur_ls of this APIObject.

        :return: The endpoint_ur_ls of this APIObject.
        :rtype: list[APIObjectEndpointURLs]
        """
        return self._endpoint_ur_ls

    @endpoint_ur_ls.setter
    def endpoint_ur_ls(self, endpoint_ur_ls):
        """
        Sets the endpoint_ur_ls of this APIObject.

        :param endpoint_ur_ls: The endpoint_ur_ls of this APIObject.
        :type: list[APIObjectEndpointURLs]
        """

        self._endpoint_ur_ls = endpoint_ur_ls

    @property
    def business_information(self):
        """
        Gets the business_information of this APIObject.

        :return: The business_information of this APIObject.
        :rtype: APIObjectBusinessInformation
        """
        return self._business_information

    @business_information.setter
    def business_information(self, business_information):
        """
        Sets the business_information of this APIObject.

        :param business_information: The business_information of this APIObject.
        :type: APIObjectBusinessInformation
        """

        self._business_information = business_information

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, APIObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
