# coding: utf-8

"""
    WSO2 API Manager - Store

    This specifies a **RESTful API** for WSO2 **API Manager** - Store.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.store/src/main/resources/store-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Document1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id': 'str',
        'name': 'str',
        'type': 'str',
        'summary': 'str',
        'source_type': 'str',
        'source_url': 'str',
        'other_type_name': 'str'
    }

    attribute_map = {
        'document_id': 'documentId',
        'name': 'name',
        'type': 'type',
        'summary': 'summary',
        'source_type': 'sourceType',
        'source_url': 'sourceUrl',
        'other_type_name': 'otherTypeName'
    }

    def __init__(self, document_id=None, name=None, type=None, summary=None, source_type=None, source_url=None, other_type_name=None):
        """
        Document1 - a model defined in Swagger
        """

        self._document_id = None
        self._name = None
        self._type = None
        self._summary = None
        self._source_type = None
        self._source_url = None
        self._other_type_name = None

        if document_id is not None:
          self.document_id = document_id
        self.name = name
        self.type = type
        if summary is not None:
          self.summary = summary
        self.source_type = source_type
        if source_url is not None:
          self.source_url = source_url
        if other_type_name is not None:
          self.other_type_name = other_type_name

    @property
    def document_id(self):
        """
        Gets the document_id of this Document1.

        :return: The document_id of this Document1.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """
        Sets the document_id of this Document1.

        :param document_id: The document_id of this Document1.
        :type: str
        """

        self._document_id = document_id

    @property
    def name(self):
        """
        Gets the name of this Document1.

        :return: The name of this Document1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Document1.

        :param name: The name of this Document1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this Document1.

        :return: The type of this Document1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Document1.

        :param type: The type of this Document1.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = ["HOWTO", "SAMPLES", "PUBLIC_FORUM", "SUPPORT_FORUM", "API_MESSAGE_FORMAT", "SWAGGER_DOC", "OTHER"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def summary(self):
        """
        Gets the summary of this Document1.

        :return: The summary of this Document1.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this Document1.

        :param summary: The summary of this Document1.
        :type: str
        """

        self._summary = summary

    @property
    def source_type(self):
        """
        Gets the source_type of this Document1.

        :return: The source_type of this Document1.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """
        Sets the source_type of this Document1.

        :param source_type: The source_type of this Document1.
        :type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")
        allowed_values = ["INLINE", "URL", "FILE"]
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def source_url(self):
        """
        Gets the source_url of this Document1.

        :return: The source_url of this Document1.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """
        Sets the source_url of this Document1.

        :param source_url: The source_url of this Document1.
        :type: str
        """

        self._source_url = source_url

    @property
    def other_type_name(self):
        """
        Gets the other_type_name of this Document1.

        :return: The other_type_name of this Document1.
        :rtype: str
        """
        return self._other_type_name

    @other_type_name.setter
    def other_type_name(self, other_type_name):
        """
        Sets the other_type_name of this Document1.

        :param other_type_name: The other_type_name of this Document1.
        :type: str
        """

        self._other_type_name = other_type_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Document1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
